#!/bin/bash

### previously in vaultsetup



echo "debug100"

#Enable V2 Key/Value Secrets
#curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/mounts/secret -d '{"type": "kv-v2"}' | /usr/bin/jq
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/mounts/secret -d '{"type": "kv-v2"}'

echo "debug110"
#Check the mounts:
#curl -s -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/mounts | /usr/bin/jq
curl -s -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/mounts

echo "debug120"
#Enable Approle Authentication
#curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth/approle -d '{"type": "approle"}' | /usr/bin/jq
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth/approle -d '{"type": "approle"}'

echo "debug130"
#Check authenticators:
#curl -s -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth | /usr/bin/jq
curl -s -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth

echo "debug140"
#Enable userpass authentication
#curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth/userpass -d '{"type": "userpass"}' | /usr/bin/jq
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/sys/auth/userpass -d '{"type": "userpass"}'

#This engine is not currently used by Tapis but we still enable it.


echo "debug000"

### 



echo "debug100"
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" --data @/tmp/sk-roles/sk-role.json http://vault:8200/v1/auth/approle/role/sk

echo "debug101"
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" --data @/tmp/sk-roles/sk-admin-role.json http://vault:8200/v1/auth/approle/role/sk-admin

echo "debug130"
#echo "vault-token:"
#echo $VAULT_TOKEN
echo "sk secret-id:" 
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk/secret-id | jq -r .data.secret_id
echo "sk role-id:" 
curl -s -X GET -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk/role-id | jq -r .data.role_id

echo "sk-admin secret-id:" 
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk-admin/secret-id | jq -r .data.secret_id
echo "sk-admin role-id:" 
curl -s -X GET -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk-admin/role-id | jq -r .data.role_id

### qqq



echo "debug150"
cd /tmp/sk-admin-policies
for i in sk-admin-acl sk-admin-approle sk-admin-auth sk-admin-kv2 sk-admin-userpass
do
  echo ---
  echo $i
  data=$( cat ${i}-policy.hcl )
  payload="$( jq -nc --arg str "$data" '{"policy": $str}' )"
  #curl -X PUT -H "X-Vault-Token: $VAULT_TOKEN" -d "$payload" http://vault:8200/v1/sys/policies/acl/tapis/${i}  | jq
  curl -X PUT -H "X-Vault-Token: $VAULT_TOKEN" -d "$payload" http://vault:8200/v1/sys/policies/acl/tapis/${i} 
done

echo "debug160"
cd /tmp/sk-policies
for i in sk-acl sk-approle sk-token
do
  echo ---
  echo $i
  data=$( cat ${i}-policy.hcl )
  payload="$( jq -nc --arg str "$data" '{"policy": $str}' )"
  #curl -X PUT -H "X-Vault-Token: $VAULT_TOKEN" -d "$payload" http://vault:8200/v1/sys/policies/acl/tapis/${i}  | jq
  curl -X PUT -H "X-Vault-Token: $VAULT_TOKEN" -d "$payload" http://vault:8200/v1/sys/policies/acl/tapis/${i}  
done


### 

# This secret and its two key/value pairs are regenerated on each invocation.
# There's no point in keeping the short-lived secret-id in SK since it changes
# each time this script runs.  There's little reason to keep the static role-id 
# in SK since its always be retrieved from Vault before SK is started. 
curl -s -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk/secret-id | jq -r .data.secret_id 
curl -s -X GET -H "X-Vault-Token: $VAULT_TOKEN" http://vault:8200/v1/auth/approle/role/sk/role-id | jq -r .data.role_id 



