Administrative Procedures for SK/Vault
======================================

A) General Information
----------------------
SK's vault roles, policies and other definitions are currently kept in TACC gitlab. Clone the cic/tapis-vault.git project to work with the definitions.

The following environment variables are used throughout this document:

VAULT_TOKEN - the root vault token created and displayed on Vault installation
SK_ADMIN_TOKEN - SK token with some root-like admin permissions
SK_TOKEN - SK token with the minimal permissions necessary for SK execution

B) Get shortlived (10 min) secret needed for SK_TOKEN generation
----------------------------------------------------------------
curl -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://mykube.example.com:32342/v1/auth/approle/role/sk/secret-id | jq

C) Get shortlived (10 min) secret needed for SK_ADMIN_TOKEN generation
----------------------------------------------------------------------
curl -X POST -H "X-Vault-Token: $VAULT_TOKEN" http://mykube.example.com:32342/v1/auth/approle/role/sk-admin/secret-id | jq

D) Get the Vault-generated, perminent role-id needed for SK_TOKEN generation
----------------------------------------------------------------------------
curl -H "X-Vault-Token: $VAULT_TOKEN" http://mykube.example.com:32342/v1/auth/approle/role/sk/role-id | jq

E) Get the Vault-generated, perminent role-id needed for SK_ADMIN_TOKEN generation
----------------------------------------------------------------------------------
curl -H "X-Vault-Token: $VAULT_TOKEN" http://mykube.example.com:32342/v1/auth/approle/role/sk-admin/role-id | jq

F) Generate SK_TOKEN from command line
--------------------------------------
1. Clone the cic/tapis-vault repo as mentioned above.
2. Copy tapis-vault/roles/sk-login.json to your current working directory.
3. Copy the secret_id value acquired from B) into your copy of sk-login.json.
4. curl -X POST --data @sk-login.json http://mykube.example.com:32342/v1/auth/approle/login | jq  

G) Generate SK_ADMIN_TOKEN from command line
--------------------------------------------
1. Clone the cic/tapis-vault repo as mentioned above.
2. Copy tapis-vault/roles/sk-admin-login.json to your current working directory.
3. Copy the secret_id value acquired from C) into your copy of sk-admin-login.json.
4. curl -X POST --data @sk-admin-login.json http://mykube.example.com:32342/v1/auth/approle/login | jq  

H) Vault parameters needed to start SK in DEV environment
---------------------------------------------------------
In addition to the non-vault environment variables injected by Kube into the SK container at start up, these vault variables should also be injected:

    Env Parameter             Value
    -------------             -----
    tapis.sk.vault.disable    false
    tapis.sk.vault.address    http://mykube.example.com:32342
    tapis.sk.vault.secretid   recently generated secret_id from B)
    tapis.sk.vault.roleid     role_id generated from D)
      
If tapis.sk.vault.disable=true, then SK will start up in authorization-only mode, which means all secret APIs will fail but authorization APIs will still work.

The secret-id's generated in steps B and C have a 10 minute TTL.  The role-id's generated in steps D and E are generated by Vault once and then reused from that point on, though Vault is free to change the role-id whenever the role changes.

Note that the secret-id command returns a secret_id field; the role-id command returns a role_id field.  
    
