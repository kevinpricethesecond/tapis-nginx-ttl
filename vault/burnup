#!/bin/bash

echo "burnup vault:"



mkdir -p /home/rocky/tapisrc1-primary-data/vault/data

MYUID=`id -u`
docker run -it --rm -v /home/rocky/tapisrc1-primary-data/vault:/vault tapis/ubutil2204:1.6.0 chown $MYUID /vault

docker run -it --rm -v /home/rocky/tapisrc1-primary-data/vault:/vault vault:1.8.3 chown -R 100:1000 /vault/data

docker compose up -d
if [ $? -ne 0 ]
then
  echo "docker compose up failed. Exiting burnup."
  exit 1
fi

if [ `docker inspect -f '{{.State.Status}}' vault` != "running" ]
then
  echo "Vault is not running. Exiting burnup."
  exit 1
fi 

# wait until vault is healthy
until [ "`docker inspect -f {{.State.Health.Status}} vault`" == "healthy" ]
do
  echo -n "Waiting for Vault container to become healthy. Status: "
  docker inspect -f {{.State.Health.Status}} vault
  sleep 1
done

# check if vault is unsealed already
#sleep 5
if VAULTSTAT=`docker exec -it vault vault status -format=json`
then
  echo $VAULTSTAT
  if [ `echo $VAULTSTAT | jq -r .sealed` == "false" ]
  then
    echo "Vault is up and unsealed."
    exit 0
  fi
fi


# TODO: should we do an initialized check? requires more logic in further checks
# check if vault is initialized
#if [ `docker exec -it vault vault status -format=json | jq -r .initialized` == "false" ]
#then
#fi


# only do this step once if vault is not initialized
if [ ! -f /home/rocky/tapisrc1-primary-data/vault/vault-init ]
then
  echo
  echo "# WARNING! Important 1-time-only Vault information stored in /home/rocky/tapisrc1-primary-data/vault/vault-init . If you lose it, your Vault may be locked forever!"
  echo
  pod='vault'
  docker exec -it $pod vault operator init | sed 's/\x1b\[[0-9;]*m//g' | tr -d "\r" >& /home/rocky/tapisrc1-primary-data/vault/vault-init
  cat /home/rocky/tapisrc1-primary-data/vault/vault-init
  # chmod 400 /home/rocky/tapisrc1-primary-data/vault/vault-init
fi

# sanity check vault-init is non-zero bytes
if [ ! -s /home/rocky/tapisrc1-primary-data/vault/vault-init ]
then
  echo "# WARNING! /home/rocky/tapisrc1-primary-data/vault/vault-init exists but is zero bytes. Please fix and re-run."
  exit 1
fi

# sanity check vault-init has initial root token 
grep "Initial Root Token" /home/rocky/tapisrc1-primary-data/vault/vault-init >& /dev/null
if [ $? -ne 0 ]
then
  echo "# WARNING! Could not find Initial Root Token in /home/rocky/tapisrc1-primary-data/vault/vault-init. Please fix and re-run."
  exit 1
fi

# sanity check vault-init has unseal keys
grep "Unseal Key" /home/rocky/tapisrc1-primary-data/vault/vault-init >& /dev/null
if [ $? -ne 0 ]
then   
  echo "# WARNING! Could not find Unseal Key(s) in /home/rocky/tapisrc1-primary-data/vault/vault-init. Please fix and re-run."
  exit 1
fi

if [ ! -f /home/rocky/tapisrc1-primary-data/vault/vault-token ]
then
  grep "Initial Root Token" /home/rocky/tapisrc1-primary-data/vault/vault-init | awk -F: '{print $2}' | tr -d " \t\n\r" > /home/rocky/tapisrc1-primary-data/vault/vault-token
  chmod 400 /home/rocky/tapisrc1-primary-data/vault/vault-token
fi

u1=`grep '^Unseal Key 1:' /home/rocky/tapisrc1-primary-data/vault/vault-init | awk '{print $4}'`
u2=`grep '^Unseal Key 2:' /home/rocky/tapisrc1-primary-data/vault/vault-init | awk '{print $4}'`
u3=`grep '^Unseal Key 3:' /home/rocky/tapisrc1-primary-data/vault/vault-init | awk '{print $4}'`

# if vault sealed, unseal it 
if [ `docker exec -it vault vault status -format=json | jq -r .sealed` == "true" ]
then
  echo "unsealing:"
  docker exec -it vault vault operator unseal $u1
  docker exec -it vault vault operator unseal $u2
  docker exec -it vault vault operator unseal $u3
  echo "Vault should be up and unsealed." 
fi

# give vault some time to get fully booted up before the following services try to use it
sleep 10

exit 0


