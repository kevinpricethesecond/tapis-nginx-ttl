
networks:
    tapis:
        name: tapis
        external: true

services:
    # A note on Mongo config. You cannot declare one in this image unless you want to stop using
    # all Docker default config settings. Default script is in /usr/local/bin/docker-entrypoint.sh.
    # This default sets MONGO_INITDB_ROOT_USERNAME/PASS, sets net.bindIp="*", and runs init scripts
    # located inside of /docker-entrypoint-initdb.d. None of this stuff happens if you give your
    # own config (through entrypoint), though, you can provide "command" to give command line arguments.
    # Also, these init scripts and variables are only set on database creation. Restarts will not set
    #them off. Just FYI. This is all stuff the official Mongo image does.
    actors-mongo:
        container_name: actors-mongo
        image: mongo:4.2.6
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_REPLICA_SET_NAME: rs0
        env_file:
            - /home/rocky/tapisrc1-primary-data/actors/env
        # volumes:
        #     - ./runtime_files/certs:/data/ssl
        #     - ./runtime_files/certs/mongo-replica-set-keyfile:/keyfiles/metakeyfile
        volumes:
            - /home/rocky/tapisrc1-primary-data/actors/mongo/data:/data/db
            - /home/rocky/tapisrc1-primary-data/actors/mongo/keyfiles:/keyfiles
        networks:
            - tapis
        ulimits:
            nproc: 65535
            nofile:
                soft: 65535
                hard: 65535
        # An explanation of this compose file. Mongo backups require replica sets. To do that, you have to
        # create some keys, pass in the keys, and ensure key security is 600/700.
        # This does all of that, without needing to fork the Mongo image.
        entrypoint:
            - bash
            - -c
            - |
                cp /keyfiles/metakeyfile /keyfiles/keyfile-to-use
                chmod 400 /keyfiles/keyfile-to-use
                chown 999:999 /keyfiles/keyfile-to-use
                exec docker-entrypoint.sh $$@
        command: "mongod --bind_ip_all --replSet rs0 --keyFile /keyfiles/keyfile-to-use"
        # To enable TLS, uncomment the `command` line below.
        #command: "mongod --bind_ip_all --replSet rs0 --keyFile /keyfiles/keyfile-to-use --tlsMode requireTLS --tlsCertificateKeyFile "/data/ssl/server.pem" --tlsCAFile "/data/ssl/ca.pem"


    actors-rabbitmq:
        container_name: actors-rabbitmq
        image: rabbitmq:3.6.12-management
        environment:
            RABBITMQ_NODENAME: abaco-rabbit
            RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "+A 128"
            RABBITMQ_DEFAULT_VHOST: abaco_vhost
            RABBITMQ_DEFAULT_USER: admin
        env_file:
            - /home/rocky/tapisrc1-primary-data/actors/env
        ulimits:
            nproc: 65535
            nofile:
                soft: 65535
                hard: 65535
        networks:
            - tapis

    actors-nginx:
        container_name: actors-nginx
        image: abaco/nginx:1.6.0
        networks:
            - tapis
        volumes:
#             - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/etc/nginx/sites-enabled/flask-project"
# #            - ./images/nginx/nginx.conf:/etc/nginx/nginx.conf
# #            - ./images/nginx/sites-enabled:/etc/nginx/sites-enabled
        restart: always
        depends_on:
            actors-mongo:
                condition: service_started

    actors-reg:
        container_name: actors-reg
        image: abaco/core-v3:1.6.0
        # ports:
        #     - "127.0.0.1:5000:5000"
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            api: reg
            server: gunicorn
            threads: 1
            processes: 1
            timeout: 120
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
        depends_on:
            - actors-mongo
        networks:
            - tapis

    actors-mes:
        container_name: actors-mes
        image: abaco/core-v3:1.6.0
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        # ports:
        #     - "127.0.0.1:5001:5000"
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            server: gunicorn
            api: mes
            threads: 3
            processes: 3
            timeout: 120
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis

    actors-admin:
        container_name: actors-admin
        image: abaco/core-v3:1.6.0
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        ports:
            - "127.0.0.1:5003:5000"
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            server: gunicorn
            api: admin
            threads: 1
            processes: 1
            timeout: 120
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis

    actors-spawner:
        container_name: actors-spawner
        image: abaco/core-v3:1.6.0
        command: "python3 -u /home/tapis/actors/spawner.py"
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - /var/run/docker.sock:/var/run/docker.sock
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            _abaco_secret: 123
            mongo_password:
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
            queue: default
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis

    actors-health:
        container_name: actors-health
        image: abaco/core-v3:1.6.0
        command: /home/tapis/actors/health_check.sh
        volumes:
            - /:/host
        #     - ./config-local.json:/home/tapis/config.json
            - "./actors-config.json:/home/tapis/config.json"
            - /var/run/docker.sock:/var/run/docker.sock
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            mongo_password:
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
            # add the following pair of credentials for each tenant wanting client generation
            _abaco_DEV-DEVELOP_username: testotheruser
            _abaco_DEV-DEVELOP_password: testotheruser
            _abaco_DEV-STAGING_username: testotheruser
            _abaco_DEV-STAGING_password: testotheruser
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis

    actors-events:
        container_name: actors-events
        image: abaco/core-v3:1.6.0
        command: "python3 -u /home/tapis/actors/events.py"
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - /var/run/docker.sock:/var/run/docker.sock
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            _abaco_secret: 123
            mongo_password:
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
            # add the following pair of credentials for each tenant wanting client generation
            _abaco_DEV-DEVELOP_username: testotheruser
            _abaco_DEV-DEVELOP_password: testotheruser
            _abaco_DEV-STAGING_username: testotheruser
            _abaco_DEV-STAGING_password: testotheruser
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis

    actors-grafana:
        container_name: acrots-grafana
        image: grafana/grafana:9.4.7
        user: "104"
        depends_on:
            - actors-mongo
            - actors-reg
        networks:
            - tapis
        restart: always

    actors-metrics:
        container_name: actors-metrics
        image: abaco/core-v3:1.6.0
        networks:
            - tapis
        volumes:
        #     - ./config-local.json:/home/tapis/config.json
          - "./actors-config.json:/home/tapis/config.json"
        #     - ./abaco.log:/home/tapis/runtime_files/logs/service.log
        #     - ./runtime_files/certs:/home/tapis/runtime_files/certs
        # ports:
        #     - "127.0.0.1:5004:5000"
        environment:
            # abaco_host_path: ${abaco_path}
            abaco_host_path: "/home/rocky/tapisrc1-primary-data/actors"
            server: dev
            api: metrics
            threads: 1
            processes: 1
            timeout: 120
            TAS_ROLE_ACCT:
            TAS_ROLE_PASS:
        depends_on:
            - actors-mongo
            - actors-reg

# volumes:
#     grafana_data: {}
